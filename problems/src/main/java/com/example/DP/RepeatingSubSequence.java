package com.example.DP;

/**
 * Created by shwetatrivedi1 on 2/3/17.
 */
/*
Given a string, find if there is any sub-sequence that repeats itself.
A sub-sequence of a string is defined as a sequence of characters generated by deleting some characters in the
string without changing the order of the remaining characters.

Input:
string

Output:

0/1
0 -> No
1 -> Yes
Example:
abccba abccab
abab ------> yes, ab is repeated. So, return 1.
abba ------> No, a and b follow different order. So, return 0.
NOTE : sub-sequence length should be greater than or equal to 2
 */
/*
The idea is to remove all the non-repeated characters from the string and check if the resultant string is palindrome
or not.

If the remaining string is palindrome then it is not repeated, else there is a repetition.

One special case we need to handle for inputs like “AAA”, which are palindrome but their repeated subsequence exists.

Repeated subsequence exists for a palindrome string if it is of odd length and its middle letter is same as
left(or right) character.

https://www.geeksforgeeks.org/repeated-subsequence-length-2/

 */
public class RepeatingSubSequence {

    // Time Complexity : O(n)
    public int anytwo(String a) {
        int[] freq = new int[256];
        StringBuilder builder = new StringBuilder();
        for(int i=0;i<a.length(); i++){
            freq[a.charAt(i)]++;
            if(freq[a.charAt(i)] >3)
                return 1;
        }

        for(int i=0;i<a.length(); i++){
            if(freq[a.charAt(i)] >1)
                builder.append(a.charAt(i));
        }
        int k=builder.length();
        if(k < 3)
            return 0;
        if(isPalindrome(builder)){
            if((k & 1) != 0)
                return builder.charAt(k/2) == builder.charAt(k/2 -1) ? 1 : 0;
            return 0;
        }
        return 1;
    }

    private static boolean isPalindrome(StringBuilder builder)
    {
        int l = 0, h = builder.length()-1;
        while (h > l)
            if (builder.charAt(l++) != builder.charAt(h--))
                return false;

        return true;
    }
}
